package main

import (
	"fmt"
	"math/rand"
	"time"
)

// Функция asChan принимает любое количество аргументом, об этом нам говорит "...int",
// и возвращаем канал только для чтения. Но прежде чем вернуть, закрываем канал
func asChan(vs ...int) <-chan int {
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		close(c)
	}()
	return c
}

// функция merge принимает и возвращает канал, которые предназначены только для чтения
func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			// если значения получено из канала "a", то записываем в канала "c"
			case v, ok := <-a:
				// проверить пришло нам что-то в канал или нет мы можем через вторую переменную ""
				if ok {
					c <- v
				} else {
					// в случае, если все значения уже были отправлены из канала "a", мы присваиваем каналу nil значение, тем самым закрыв его.
					// Дабы избежать бесконечного чтения из канала
					a = nil
				}
			// если значения получено из канала "b", то записываем в канала "c"
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					// здесь аналогичная ситуация, как и с каналом "a"
					b = nil
				}
			}
			// в случае, если оба канала имеют nil-значение (то есть закрыты), то закрываем наш канал "c", и завершаем работу горутины.
			if a == nil && b == nil {
				close(c)
				return
			}
		}
	}()
	return c
}

func main() {
	rand.Seed(time.Now().Unix())

	// записываем для канала "a" числа 1, 3, 5, 7 и для канала "b" числа 2, 4, 6, 8
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)

	c := merge(a, b) // далее в канал c записываются числа из каналов "a" и "b"

	for v := range c {
		fmt.Print(v) // выводим имеющиеся числа в каналах "a" и "b" в случайном порядке
	}
}
